// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* user
model User {
  id                 String      @id @unique @default(uuid())
  email              String      @unique
  password           String
  role               UserRole
  needPasswordChange Boolean?    @default(true)
  status             UserStatus? @default(ACTIVE)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt()
  admin              Admin?
  customer           Customer?

  @@map("users")
}

// * admin

model Admin {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("customer")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  slug        String
  image       String
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  subCategory SubCategory[]
}

model SubCategory {
  id        String   @id @default(uuid())
  name      String
  slug      String
  image     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  Category @relation(fields: [id], references: [id])
}

//! type
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
